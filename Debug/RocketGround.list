
RocketGround.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e94  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002070  08002070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002070  08002070  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002070  08002070  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002074  08002074  00012074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002084  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002084  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000756a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001764  00000000  00000000  000275a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  00028d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  00029528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b27  00000000  00000000  00029c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095df  00000000  00000000  0004b78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb4d4  00000000  00000000  00054d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea8  00000000  00000000  00120294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002010 	.word	0x08002010

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002010 	.word	0x08002010

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <_pull_data_and_cmd_pins_low>:

/*
 * Repeated functionality.
 * Before each command pull all the LCD pins low.
 */
static void _pull_data_and_cmd_pins_low(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	// Pull all the ctrl pins low
	HAL_GPIO_WritePin(LCD_CMD_PIN_PORT, LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	210e      	movs	r1, #14
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <_pull_data_and_cmd_pins_low+0x1c>)
 80001ee:	f000 ff9f 	bl	8001130 <HAL_GPIO_WritePin>


	// Pull all the datapins low
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin
 80001f2:	2200      	movs	r2, #0
 80001f4:	21ff      	movs	r1, #255	; 0xff
 80001f6:	4803      	ldr	r0, [pc, #12]	; (8000204 <_pull_data_and_cmd_pins_low+0x20>)
 80001f8:	f000 ff9a 	bl	8001130 <HAL_GPIO_WritePin>
						|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	48000800 	.word	0x48000800
 8000204:	48000400 	.word	0x48000400

08000208 <Clear_LCD>:


/*
 * Clear contents on LCD and return cursor to starting position
 */
void Clear_LCD(){
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	_pull_data_and_cmd_pins_low();
 800020c:	f7ff ffea 	bl	80001e4 <_pull_data_and_cmd_pins_low>

	ENABLE_WRITE();
 8000210:	2201      	movs	r2, #1
 8000212:	2108      	movs	r1, #8
 8000214:	4808      	ldr	r0, [pc, #32]	; (8000238 <Clear_LCD+0x30>)
 8000216:	f000 ff8b 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fcd8 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2101      	movs	r1, #1
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <Clear_LCD+0x34>)
 8000226:	f000 ff83 	bl	8001130 <HAL_GPIO_WritePin>
	DISABLE_WRITE();
 800022a:	2200      	movs	r2, #0
 800022c:	2108      	movs	r1, #8
 800022e:	4802      	ldr	r0, [pc, #8]	; (8000238 <Clear_LCD+0x30>)
 8000230:	f000 ff7e 	bl	8001130 <HAL_GPIO_WritePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	48000800 	.word	0x48000800
 800023c:	48000400 	.word	0x48000400

08000240 <Entry_Mode_Set>:


/*
 * Datasheet...
 */
void Entry_Mode_Set(DDRAMAddressDirection cursor_direction, ShiftDisplayDirection shift_direction){
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	460a      	mov	r2, r1
 800024a:	71fb      	strb	r3, [r7, #7]
 800024c:	4613      	mov	r3, r2
 800024e:	71bb      	strb	r3, [r7, #6]
	_pull_data_and_cmd_pins_low();
 8000250:	f7ff ffc8 	bl	80001e4 <_pull_data_and_cmd_pins_low>

	ENABLE_WRITE();
 8000254:	2201      	movs	r2, #1
 8000256:	2108      	movs	r1, #8
 8000258:	4818      	ldr	r0, [pc, #96]	; (80002bc <Entry_Mode_Set+0x7c>)
 800025a:	f000 ff69 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 800025e:	2001      	movs	r0, #1
 8000260:	f000 fcb6 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2104      	movs	r1, #4
 8000268:	4815      	ldr	r0, [pc, #84]	; (80002c0 <Entry_Mode_Set+0x80>)
 800026a:	f000 ff61 	bl	8001130 <HAL_GPIO_WritePin>
	switch(cursor_direction){
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <Entry_Mode_Set+0x3a>
 8000274:	2b01      	cmp	r3, #1
 8000276:	d005      	beq.n	8000284 <Entry_Mode_Set+0x44>
 8000278:	e009      	b.n	800028e <Entry_Mode_Set+0x4e>
	case CURSOR_DIRECTION_RIGHT:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D1_Pin, GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2102      	movs	r1, #2
 800027e:	4810      	ldr	r0, [pc, #64]	; (80002c0 <Entry_Mode_Set+0x80>)
 8000280:	f000 ff56 	bl	8001130 <HAL_GPIO_WritePin>
	case CURSOR_DIRECTION_LEFT:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D1_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2102      	movs	r1, #2
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <Entry_Mode_Set+0x80>)
 800028a:	f000 ff51 	bl	8001130 <HAL_GPIO_WritePin>
	}

	switch(shift_direction){
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <Entry_Mode_Set+0x5e>
	case DISPLAY_NO_SHIFT:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2101      	movs	r1, #1
 8000298:	4809      	ldr	r0, [pc, #36]	; (80002c0 <Entry_Mode_Set+0x80>)
 800029a:	f000 ff49 	bl	8001130 <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	2101      	movs	r1, #1
 80002a2:	4807      	ldr	r0, [pc, #28]	; (80002c0 <Entry_Mode_Set+0x80>)
 80002a4:	f000 ff44 	bl	8001130 <HAL_GPIO_WritePin>
	}
	DISABLE_WRITE();
 80002a8:	2200      	movs	r2, #0
 80002aa:	2108      	movs	r1, #8
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <Entry_Mode_Set+0x7c>)
 80002ae:	f000 ff3f 	bl	8001130 <HAL_GPIO_WritePin>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	48000800 	.word	0x48000800
 80002c0:	48000400 	.word	0x48000400

080002c4 <Display_Control>:

void Display_Control(DisplayPower dsp_pwr, CursorMode cursor_mode, CursorBlinkMode cursor_blink_mode){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	_pull_data_and_cmd_pins_low();
 80002d6:	f7ff ff85 	bl	80001e4 <_pull_data_and_cmd_pins_low>

	ENABLE_WRITE();
 80002da:	2201      	movs	r2, #1
 80002dc:	2108      	movs	r1, #8
 80002de:	4822      	ldr	r0, [pc, #136]	; (8000368 <Display_Control+0xa4>)
 80002e0:	f000 ff26 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 fc73 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D3_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	481f      	ldr	r0, [pc, #124]	; (800036c <Display_Control+0xa8>)
 80002f0:	f000 ff1e 	bl	8001130 <HAL_GPIO_WritePin>
	switch(dsp_pwr){
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d002      	beq.n	8000300 <Display_Control+0x3c>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d005      	beq.n	800030a <Display_Control+0x46>
 80002fe:	e009      	b.n	8000314 <Display_Control+0x50>
	case DISPLAY_ON:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2104      	movs	r1, #4
 8000304:	4819      	ldr	r0, [pc, #100]	; (800036c <Display_Control+0xa8>)
 8000306:	f000 ff13 	bl	8001130 <HAL_GPIO_WritePin>
	case DISPLAY_OFF:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2104      	movs	r1, #4
 800030e:	4817      	ldr	r0, [pc, #92]	; (800036c <Display_Control+0xa8>)
 8000310:	f000 ff0e 	bl	8001130 <HAL_GPIO_WritePin>
	}

	switch(cursor_mode){
 8000314:	79bb      	ldrb	r3, [r7, #6]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <Display_Control+0x5c>
 800031a:	2b01      	cmp	r3, #1
 800031c:	d005      	beq.n	800032a <Display_Control+0x66>
 800031e:	e009      	b.n	8000334 <Display_Control+0x70>
	case CURSOR_ON:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D1_Pin, GPIO_PIN_SET);
 8000320:	2201      	movs	r2, #1
 8000322:	2102      	movs	r1, #2
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <Display_Control+0xa8>)
 8000326:	f000 ff03 	bl	8001130 <HAL_GPIO_WritePin>
	case CURSOR_OFF:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D1_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2102      	movs	r1, #2
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <Display_Control+0xa8>)
 8000330:	f000 fefe 	bl	8001130 <HAL_GPIO_WritePin>
	}

	switch(cursor_blink_mode){
 8000334:	797b      	ldrb	r3, [r7, #5]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <Display_Control+0x7c>
 800033a:	2b01      	cmp	r3, #1
 800033c:	d005      	beq.n	800034a <Display_Control+0x86>
 800033e:	e009      	b.n	8000354 <Display_Control+0x90>
	case CURSOR_BLINK:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2101      	movs	r1, #1
 8000344:	4809      	ldr	r0, [pc, #36]	; (800036c <Display_Control+0xa8>)
 8000346:	f000 fef3 	bl	8001130 <HAL_GPIO_WritePin>
	case CURSOR_NO_BLINK:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2101      	movs	r1, #1
 800034e:	4807      	ldr	r0, [pc, #28]	; (800036c <Display_Control+0xa8>)
 8000350:	f000 feee 	bl	8001130 <HAL_GPIO_WritePin>
	}
	DISABLE_WRITE();
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <Display_Control+0xa4>)
 800035a:	f000 fee9 	bl	8001130 <HAL_GPIO_WritePin>
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	48000800 	.word	0x48000800
 800036c:	48000400 	.word	0x48000400

08000370 <Interface_Init>:
	}
	DISABLE_WRITE();
}


void Interface_Init(DataTransferMode data_transfer_mode, NumOfDisplayLine num_of_display_line, FontType font_type){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	460b      	mov	r3, r1
 800037c:	71bb      	strb	r3, [r7, #6]
 800037e:	4613      	mov	r3, r2
 8000380:	717b      	strb	r3, [r7, #5]
	_pull_data_and_cmd_pins_low();
 8000382:	f7ff ff2f 	bl	80001e4 <_pull_data_and_cmd_pins_low>


	ENABLE_WRITE();
 8000386:	2201      	movs	r2, #1
 8000388:	2108      	movs	r1, #8
 800038a:	4822      	ldr	r0, [pc, #136]	; (8000414 <Interface_Init+0xa4>)
 800038c:	f000 fed0 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fc1d 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D5_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2120      	movs	r1, #32
 800039a:	481f      	ldr	r0, [pc, #124]	; (8000418 <Interface_Init+0xa8>)
 800039c:	f000 fec8 	bl	8001130 <HAL_GPIO_WritePin>

	switch(data_transfer_mode){
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <Interface_Init+0x3c>
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d005      	beq.n	80003b6 <Interface_Init+0x46>
 80003aa:	e009      	b.n	80003c0 <Interface_Init+0x50>
	case BIT_MODE_8:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	4819      	ldr	r0, [pc, #100]	; (8000418 <Interface_Init+0xa8>)
 80003b2:	f000 febd 	bl	8001130 <HAL_GPIO_WritePin>
	case BIT_MODE_4:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, GPIO_PIN_RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2110      	movs	r1, #16
 80003ba:	4817      	ldr	r0, [pc, #92]	; (8000418 <Interface_Init+0xa8>)
 80003bc:	f000 feb8 	bl	8001130 <HAL_GPIO_WritePin>
	}

	switch(num_of_display_line){
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d002      	beq.n	80003cc <Interface_Init+0x5c>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d005      	beq.n	80003d6 <Interface_Init+0x66>
 80003ca:	e009      	b.n	80003e0 <Interface_Init+0x70>
	case ONE_LINE:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D3_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2108      	movs	r1, #8
 80003d0:	4811      	ldr	r0, [pc, #68]	; (8000418 <Interface_Init+0xa8>)
 80003d2:	f000 fead 	bl	8001130 <HAL_GPIO_WritePin>
	case TWO_LINES:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D3_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2108      	movs	r1, #8
 80003da:	480f      	ldr	r0, [pc, #60]	; (8000418 <Interface_Init+0xa8>)
 80003dc:	f000 fea8 	bl	8001130 <HAL_GPIO_WritePin>
	}

	switch(font_type){
 80003e0:	797b      	ldrb	r3, [r7, #5]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <Interface_Init+0x7c>
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d005      	beq.n	80003f6 <Interface_Init+0x86>
 80003ea:	e009      	b.n	8000400 <Interface_Init+0x90>
	case FONT_5X10:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, GPIO_PIN_SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2104      	movs	r1, #4
 80003f0:	4809      	ldr	r0, [pc, #36]	; (8000418 <Interface_Init+0xa8>)
 80003f2:	f000 fe9d 	bl	8001130 <HAL_GPIO_WritePin>
	case FONT_5X8:
		HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2104      	movs	r1, #4
 80003fa:	4807      	ldr	r0, [pc, #28]	; (8000418 <Interface_Init+0xa8>)
 80003fc:	f000 fe98 	bl	8001130 <HAL_GPIO_WritePin>
	}
	DISABLE_WRITE();
 8000400:	2200      	movs	r2, #0
 8000402:	2108      	movs	r1, #8
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <Interface_Init+0xa4>)
 8000406:	f000 fe93 	bl	8001130 <HAL_GPIO_WritePin>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	48000800 	.word	0x48000800
 8000418:	48000400 	.word	0x48000400

0800041c <Write_Data_to_RAM>:

	DISABLE_WRITE();
}


void Write_Data_to_RAM(uint8_t data){
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	_pull_data_and_cmd_pins_low();
 8000426:	f7ff fedd 	bl	80001e4 <_pull_data_and_cmd_pins_low>

	ENABLE_WRITE();
 800042a:	2201      	movs	r2, #1
 800042c:	2108      	movs	r1, #8
 800042e:	4833      	ldr	r0, [pc, #204]	; (80004fc <Write_Data_to_RAM+0xe0>)
 8000430:	f000 fe7e 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fbcb 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CMD_PIN_PORT, LCD_RS_Pin, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2102      	movs	r1, #2
 800043e:	482f      	ldr	r0, [pc, #188]	; (80004fc <Write_Data_to_RAM+0xe0>)
 8000440:	f000 fe76 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D7_Pin, ((data>>7)&0x01));
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	09db      	lsrs	r3, r3, #7
 8000448:	b2db      	uxtb	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	482c      	ldr	r0, [pc, #176]	; (8000500 <Write_Data_to_RAM+0xe4>)
 8000450:	f000 fe6e 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D6_Pin, ((data>>6)&0x01));
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	099b      	lsrs	r3, r3, #6
 8000458:	b2db      	uxtb	r3, r3
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	2140      	movs	r1, #64	; 0x40
 8000464:	4826      	ldr	r0, [pc, #152]	; (8000500 <Write_Data_to_RAM+0xe4>)
 8000466:	f000 fe63 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D5_Pin, ((data>>5)&0x01));
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	095b      	lsrs	r3, r3, #5
 800046e:	b2db      	uxtb	r3, r3
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	2120      	movs	r1, #32
 800047a:	4821      	ldr	r0, [pc, #132]	; (8000500 <Write_Data_to_RAM+0xe4>)
 800047c:	f000 fe58 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, ((data>>4)&0x01));
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	091b      	lsrs	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	461a      	mov	r2, r3
 800048e:	2110      	movs	r1, #16
 8000490:	481b      	ldr	r0, [pc, #108]	; (8000500 <Write_Data_to_RAM+0xe4>)
 8000492:	f000 fe4d 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D3_Pin, ((data>>3)&0x01));
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	2108      	movs	r1, #8
 80004a6:	4816      	ldr	r0, [pc, #88]	; (8000500 <Write_Data_to_RAM+0xe4>)
 80004a8:	f000 fe42 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D2_Pin, ((data>>2)&0x01));
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	461a      	mov	r2, r3
 80004ba:	2104      	movs	r1, #4
 80004bc:	4810      	ldr	r0, [pc, #64]	; (8000500 <Write_Data_to_RAM+0xe4>)
 80004be:	f000 fe37 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D1_Pin, ((data>>1)&0x01));
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	085b      	lsrs	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	2102      	movs	r1, #2
 80004d2:	480b      	ldr	r0, [pc, #44]	; (8000500 <Write_Data_to_RAM+0xe4>)
 80004d4:	f000 fe2c 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D0_Pin, ((data>>0)&0x01));
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	2101      	movs	r1, #1
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <Write_Data_to_RAM+0xe4>)
 80004e6:	f000 fe23 	bl	8001130 <HAL_GPIO_WritePin>

	DISABLE_WRITE();
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <Write_Data_to_RAM+0xe0>)
 80004f0:	f000 fe1e 	bl	8001130 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	48000800 	.word	0x48000800
 8000500:	48000400 	.word	0x48000400

08000504 <Power_On_LCD_8_Bit_Mode>:


// Higher level functions

// LCD startup sequence
void Power_On_LCD_8_Bit_Mode(){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_Delay(30);
 8000508:	201e      	movs	r0, #30
 800050a:	f000 fb61 	bl	8000bd0 <HAL_Delay>


	ENABLE_WRITE();
 800050e:	2201      	movs	r2, #1
 8000510:	2108      	movs	r1, #8
 8000512:	482f      	ldr	r0, [pc, #188]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 8000514:	f000 fe0c 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fb59 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D5_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 8000524:	f000 fe04 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2110      	movs	r1, #16
 800052c:	4829      	ldr	r0, [pc, #164]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 800052e:	f000 fdff 	bl	8001130 <HAL_GPIO_WritePin>
	DISABLE_WRITE();
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	4826      	ldr	r0, [pc, #152]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 8000538:	f000 fdfa 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_Delay(8);
 800053c:	2008      	movs	r0, #8
 800053e:	f000 fb47 	bl	8000bd0 <HAL_Delay>

	ENABLE_WRITE();
 8000542:	2201      	movs	r2, #1
 8000544:	2108      	movs	r1, #8
 8000546:	4822      	ldr	r0, [pc, #136]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 8000548:	f000 fdf2 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fb3f 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D5_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2120      	movs	r1, #32
 8000556:	481f      	ldr	r0, [pc, #124]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 8000558:	f000 fdea 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2110      	movs	r1, #16
 8000560:	481c      	ldr	r0, [pc, #112]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 8000562:	f000 fde5 	bl	8001130 <HAL_GPIO_WritePin>
	DISABLE_WRITE();
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	4819      	ldr	r0, [pc, #100]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 800056c:	f000 fde0 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f000 fb2d 	bl	8000bd0 <HAL_Delay>

	ENABLE_WRITE();
 8000576:	2201      	movs	r2, #1
 8000578:	2108      	movs	r1, #8
 800057a:	4815      	ldr	r0, [pc, #84]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 800057c:	f000 fdd8 	bl	8001130 <HAL_GPIO_WritePin>
	WRITE_DELAY();
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fb25 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D5_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2120      	movs	r1, #32
 800058a:	4812      	ldr	r0, [pc, #72]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 800058c:	f000 fdd0 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_PIN_PORT, LCD_D4_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2110      	movs	r1, #16
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <Power_On_LCD_8_Bit_Mode+0xd0>)
 8000596:	f000 fdcb 	bl	8001130 <HAL_GPIO_WritePin>
	DISABLE_WRITE();
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <Power_On_LCD_8_Bit_Mode+0xcc>)
 80005a0:	f000 fdc6 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fb13 	bl	8000bd0 <HAL_Delay>


	Interface_Init(BIT_MODE_8, ONE_LINE, FONT_5X10);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f7ff fede 	bl	8000370 <Interface_Init>
	Display_Control(DISPLAY_ON, CURSOR_ON, CURSOR_BLINK);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff fe83 	bl	80002c4 <Display_Control>
	Clear_LCD();
 80005be:	f7ff fe23 	bl	8000208 <Clear_LCD>
	Entry_Mode_Set(CURSOR_DIRECTION_RIGHT, DISPLAY_NO_SHIFT);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fe3b 	bl	8000240 <Entry_Mode_Set>

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <Write_String_to_LCD>:
	HAL_Delay(10);
	Cursor_Return_Home();

}

void Write_String_to_LCD(char* str){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	for(int i=0;i<strlen(str);i++){
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e009      	b.n	80005fa <Write_String_to_LCD+0x22>
		Write_Data_to_RAM(str[i]);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff14 	bl	800041c <Write_Data_to_RAM>
	for(int i=0;i<strlen(str);i++){
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	3301      	adds	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fdea 	bl	80001d4 <strlen>
 8000600:	4602      	mov	r2, r0
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8ee      	bhi.n	80005e6 <Write_String_to_LCD+0xe>
	}
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_GPIO_Init>:
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	4b5c      	ldr	r3, [pc, #368]	; (800079c <MX_GPIO_Init+0x188>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a5b      	ldr	r2, [pc, #364]	; (800079c <MX_GPIO_Init+0x188>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b59      	ldr	r3, [pc, #356]	; (800079c <MX_GPIO_Init+0x188>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	4b56      	ldr	r3, [pc, #344]	; (800079c <MX_GPIO_Init+0x188>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a55      	ldr	r2, [pc, #340]	; (800079c <MX_GPIO_Init+0x188>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b53      	ldr	r3, [pc, #332]	; (800079c <MX_GPIO_Init+0x188>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_GPIO_Init+0x188>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a4f      	ldr	r2, [pc, #316]	; (800079c <MX_GPIO_Init+0x188>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_GPIO_Init+0x188>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_GPIO_Init+0x188>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a49      	ldr	r2, [pc, #292]	; (800079c <MX_GPIO_Init+0x188>)
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b47      	ldr	r3, [pc, #284]	; (800079c <MX_GPIO_Init+0x188>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	f641 6131 	movw	r1, #7729	; 0x1e31
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f000 fd4c 	bl	8001130 <HAL_GPIO_WritePin>
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800069e:	4840      	ldr	r0, [pc, #256]	; (80007a0 <MX_GPIO_Init+0x18c>)
 80006a0:	f000 fd46 	bl	8001130 <HAL_GPIO_WritePin>
 80006a4:	2200      	movs	r2, #0
 80006a6:	f640 4107 	movw	r1, #3079	; 0xc07
 80006aa:	483e      	ldr	r0, [pc, #248]	; (80007a4 <MX_GPIO_Init+0x190>)
 80006ac:	f000 fd40 	bl	8001130 <HAL_GPIO_WritePin>
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4836      	ldr	r0, [pc, #216]	; (80007a0 <MX_GPIO_Init+0x18c>)
 80006c8:	f000 fbb8 	bl	8000e3c <HAL_GPIO_Init>
 80006cc:	f641 6331 	movw	r3, #7729	; 0x1e31
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f000 fba8 	bl	8000e3c <HAL_GPIO_Init>
 80006ec:	230c      	movs	r3, #12
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	2302      	movs	r3, #2
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	2307      	movs	r3, #7
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fb97 	bl	8000e3c <HAL_GPIO_Init>
 800070e:	2330      	movs	r3, #48	; 0x30
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	481e      	ldr	r0, [pc, #120]	; (80007a0 <MX_GPIO_Init+0x18c>)
 8000726:	f000 fb89 	bl	8000e3c <HAL_GPIO_Init>
 800072a:	f640 4307 	movw	r3, #3079	; 0xc07
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x190>)
 8000744:	f000 fb7a 	bl	8000e3c <HAL_GPIO_Init>
 8000748:	f44f 7360 	mov.w	r3, #896	; 0x380
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4810      	ldr	r0, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x18c>)
 8000760:	f000 fb6c 	bl	8000e3c <HAL_GPIO_Init>
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	2302      	movs	r3, #2
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_GPIO_Init+0x18c>)
 800077e:	f000 fb5d 	bl	8000e3c <HAL_GPIO_Init>
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2017      	movs	r0, #23
 8000788:	f000 fb21 	bl	8000dce <HAL_NVIC_SetPriority>
 800078c:	2017      	movs	r0, #23
 800078e:	f000 fb3a 	bl	8000e06 <HAL_NVIC_EnableIRQ>
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	48000400 	.word	0x48000400

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 f994 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f810 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff ff2e 	bl	8000614 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007b8:	f000 f874 	bl	80008a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Power_On_LCD_8_Bit_Mode();
 80007bc:	f7ff fea2 	bl	8000504 <Power_On_LCD_8_Bit_Mode>
  Write_String_to_LCD("Hello");
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <main+0x28>)
 80007c2:	f7ff ff09 	bl	80005d8 <Write_String_to_LCD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Write_String_to_LCD("Hello");
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <main+0x28>)
 80007c8:	f7ff ff06 	bl	80005d8 <Write_String_to_LCD>
 80007cc:	e7fb      	b.n	80007c6 <main+0x1e>
 80007ce:	bf00      	nop
 80007d0:	08002028 	.word	0x08002028

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc0c 	bl	8002000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f000 fce3 	bl	80011c4 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f837 	bl	8000876 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000826:	2307      	movs	r3, #7
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fd1a 	bl	8001270 <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000842:	f000 f818 	bl	8000876 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f91a 	bl	8001a98 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086a:	f000 f804 	bl	8000876 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3758      	adds	r7, #88	; 0x58
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087a:	b672      	cpsid	i
}
 800087c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fc53 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800088a:	2064      	movs	r0, #100	; 0x64
 800088c:	f000 f9a0 	bl	8000bd0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2120      	movs	r1, #32
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fc4a 	bl	8001130 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 f997 	bl	8000bd0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008a2:	e7ec      	b.n	800087e <Error_Handler+0x8>

080008a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_SPI1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_SPI1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_SPI1_Init+0x74>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_SPI1_Init+0x74>)
 80008be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_SPI1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_SPI1_Init+0x74>)
 80008d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_SPI1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SPI1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_SPI1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SPI1_Init+0x74>)
 80008f2:	2207      	movs	r2, #7
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SPI1_Init+0x74>)
 80008fe:	2208      	movs	r2, #8
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_SPI1_Init+0x74>)
 8000904:	f001 fab4 	bl	8001e70 <HAL_SPI_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f7ff ffb2 	bl	8000876 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000028 	.word	0x20000028
 800091c:	40013000 	.word	0x40013000

08000920 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_SPI_MspInit+0x7c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d128      	bne.n	8000994 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094c:	6613      	str	r3, [r2, #96]	; 0x60
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_SPI_MspInit+0x80>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000972:	23c2      	movs	r3, #194	; 0xc2
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000982:	2305      	movs	r3, #5
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 fa54 	bl	8000e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40013000 	.word	0x40013000
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f8aa 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a44:	2080      	movs	r0, #128	; 0x80
 8000a46:	f000 fb8b 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a4e:	f000 fb87 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a56:	f000 fb83 	bl	8001160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f001 fa81 	bl	8001fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fe77 	bl	80007a8 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08002078 	.word	0x08002078
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	20000090 	.word	0x20000090

08000ad4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_Init+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_Init+0x3c>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f962 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f80f 	bl	8000b18 <HAL_InitTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e001      	b.n	8000b0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b06:	f7ff ff4d 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d023      	beq.n	8000b74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_InitTick+0x70>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f96d 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10f      	bne.n	8000b6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d809      	bhi.n	8000b68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 f937 	bl	8000dce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_InitTick+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e001      	b.n	8000b78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	2000008c 	.word	0x2000008c

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000008c 	.word	0x2000008c

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e154      	b.n	80010f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8146 	beq.w	80010f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80a0 	beq.w	80010f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb4:	4a57      	ldr	r2, [pc, #348]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <HAL_GPIO_Init+0x2dc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff2:	d019      	beq.n	8001028 <HAL_GPIO_Init+0x1ec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2e0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1e0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1dc>
 8001014:	2304      	movs	r3, #4
 8001016:	e008      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001018:	2307      	movs	r3, #7
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 800101c:	2303      	movs	r3, #3
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001028:	2300      	movs	r3, #0
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2dc>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106c:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001096:	4a25      	ldr	r2, [pc, #148]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f aea3 	bne.w	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f806 	bl	8001190 <HAL_GPIO_EXTI_Callback>
  }
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d2:	d130      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e0:	d038      	beq.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2232      	movs	r2, #50	; 0x32
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001208:	e002      	b.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3b01      	subs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121c:	d102      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x60>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f2      	bne.n	800120a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001230:	d110      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e00f      	b.n	8001256 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001242:	d007      	beq.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001252:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40007000 	.word	0x40007000
 8001268:	20000000 	.word	0x20000000
 800126c:	431bde83 	.word	0x431bde83

08001270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f000 bc02 	b.w	8001a88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001284:	4b96      	ldr	r3, [pc, #600]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800128e:	4b94      	ldr	r3, [pc, #592]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80e4 	beq.w	800146e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_RCC_OscConfig+0x4c>
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	f040 808b 	bne.w	80013ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 8087 	bne.w	80013ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_OscConfig+0x64>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e3d9      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <HAL_RCC_OscConfig+0x7e>
 80012e4:	4b7e      	ldr	r3, [pc, #504]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ec:	e005      	b.n	80012fa <HAL_RCC_OscConfig+0x8a>
 80012ee:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d223      	bcs.n	8001346 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd54 	bl	8001db0 <RCC_SetFlashLatencyFromMSIRange>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e3ba      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001312:	4b73      	ldr	r3, [pc, #460]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a72      	ldr	r2, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b70      	ldr	r3, [pc, #448]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	496d      	ldr	r1, [pc, #436]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	4968      	ldr	r1, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e025      	b.n	8001392 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001346:	4b66      	ldr	r3, [pc, #408]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4960      	ldr	r1, [pc, #384]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	495b      	ldr	r1, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fd14 	bl	8001db0 <RCC_SetFlashLatencyFromMSIRange>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e37a      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001392:	f000 fc81 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001396:	4602      	mov	r2, r0
 8001398:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	4950      	ldr	r1, [pc, #320]	; (80014e4 <HAL_RCC_OscConfig+0x274>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_RCC_OscConfig+0x278>)
 80013b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013b2:	4b4e      	ldr	r3, [pc, #312]	; (80014ec <HAL_RCC_OscConfig+0x27c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fbae 	bl	8000b18 <HAL_InitTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d052      	beq.n	800146c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	e35e      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d032      	beq.n	8001438 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013de:	f7ff fbeb 	bl	8000bb8 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbe7 	bl	8000bb8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e347      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4930      	ldr	r1, [pc, #192]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	492b      	ldr	r1, [pc, #172]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
 8001436:	e01a      	b.n	800146e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a28      	ldr	r2, [pc, #160]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001444:	f7ff fbb8 	bl	8000bb8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800144c:	f7ff fbb4 	bl	8000bb8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e314      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1dc>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d073      	beq.n	8001562 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b08      	cmp	r3, #8
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x21c>
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d10e      	bne.n	80014a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d10b      	bne.n	80014a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d063      	beq.n	8001560 <HAL_RCC_OscConfig+0x2f0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d15f      	bne.n	8001560 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e2f1      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x24c>
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e025      	b.n	8001508 <HAL_RCC_OscConfig+0x298>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	d114      	bne.n	80014f0 <HAL_RCC_OscConfig+0x280>
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a02      	ldr	r2, [pc, #8]	; (80014e0 <HAL_RCC_OscConfig+0x270>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x298>
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08002030 	.word	0x08002030
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000004 	.word	0x20000004
 80014f0:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a9f      	ldr	r2, [pc, #636]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b9d      	ldr	r3, [pc, #628]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a9c      	ldr	r2, [pc, #624]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d013      	beq.n	8001538 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fb52 	bl	8000bb8 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001518:	f7ff fb4e 	bl	8000bb8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e2ae      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152a:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x2a8>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fb3e 	bl	8000bb8 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001540:	f7ff fb3a 	bl	8000bb8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b64      	cmp	r3, #100	; 0x64
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e29a      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001552:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x2d0>
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d060      	beq.n	8001630 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x310>
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d119      	bne.n	80015ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d116      	bne.n	80015ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_OscConfig+0x328>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e277      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4973      	ldr	r1, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	e040      	b.n	8001630 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d023      	beq.n	80015fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff faf9 	bl	8000bb8 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff faf5 	bl	8000bb8 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e255      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015dc:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	495f      	ldr	r1, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e018      	b.n	8001630 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a5c      	ldr	r2, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fad5 	bl	8000bb8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fad1 	bl	8000bb8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e231      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01c      	beq.n	800167e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164a:	4a4a      	ldr	r2, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fab0 	bl	8000bb8 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff faac 	bl	8000bb8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e20c      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ef      	beq.n	800165c <HAL_RCC_OscConfig+0x3ec>
 800167c:	e01b      	b.n	80016b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001684:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fa93 	bl	8000bb8 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001696:	f7ff fa8f 	bl	8000bb8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1ef      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ef      	bne.n	8001696 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80a6 	beq.w	8001810 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a26      	ldr	r2, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ec:	2301      	movs	r3, #1
 80016ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_RCC_OscConfig+0x508>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d118      	bne.n	800172e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x508>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x508>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001708:	f7ff fa56 	bl	8000bb8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001710:	f7ff fa52 	bl	8000bb8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1b2      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x508>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d108      	bne.n	8001748 <HAL_RCC_OscConfig+0x4d8>
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001746:	e029      	b.n	800179c <HAL_RCC_OscConfig+0x52c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b05      	cmp	r3, #5
 800174e:	d115      	bne.n	800177c <HAL_RCC_OscConfig+0x50c>
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_RCC_OscConfig+0x504>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001770:	e014      	b.n	800179c <HAL_RCC_OscConfig+0x52c>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
 800177c:	4b9a      	ldr	r3, [pc, #616]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a99      	ldr	r2, [pc, #612]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178c:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a95      	ldr	r2, [pc, #596]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d016      	beq.n	80017d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa08 	bl	8000bb8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fa04 	bl	8000bb8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e162      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ed      	beq.n	80017ac <HAL_RCC_OscConfig+0x53c>
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff f9f1 	bl	8000bb8 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f9ed 	bl	8000bb8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e14b      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ed      	bne.n	80017da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a77      	ldr	r2, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b00      	cmp	r3, #0
 800181a:	d03c      	beq.n	8001896 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01c      	beq.n	800185e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001824:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800182a:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff f9c0 	bl	8000bb8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183c:	f7ff f9bc 	bl	8000bb8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e11c      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184e:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ef      	beq.n	800183c <HAL_RCC_OscConfig+0x5cc>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800185e:	4b62      	ldr	r3, [pc, #392]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001864:	4a60      	ldr	r2, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f9a3 	bl	8000bb8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001876:	f7ff f99f 	bl	8000bb8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0ff      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 800188a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1ef      	bne.n	8001876 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80f3 	beq.w	8001a86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	f040 80c9 	bne.w	8001a3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018aa:	4b4f      	ldr	r3, [pc, #316]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0203 	and.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d12c      	bne.n	8001918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	3b01      	subs	r3, #1
 80018ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d123      	bne.n	8001918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d11b      	bne.n	8001918 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d113      	bne.n	8001918 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d109      	bne.n	8001918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	085b      	lsrs	r3, r3, #1
 8001910:	3b01      	subs	r3, #1
 8001912:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d06b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d062      	beq.n	80019e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0ac      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001938:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193a:	f7ff f93d 	bl	8000bb8 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f939 	bl	8000bb8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e099      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_RCC_OscConfig+0x77c>)
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001970:	3a01      	subs	r2, #1
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	4311      	orrs	r1, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800197a:	0212      	lsls	r2, r2, #8
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001982:	0852      	lsrs	r2, r2, #1
 8001984:	3a01      	subs	r2, #1
 8001986:	0552      	lsls	r2, r2, #21
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800198e:	0852      	lsrs	r2, r2, #1
 8001990:	3a01      	subs	r2, #1
 8001992:	0652      	lsls	r2, r2, #25
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800199a:	06d2      	lsls	r2, r2, #27
 800199c:	430a      	orrs	r2, r1
 800199e:	4912      	ldr	r1, [pc, #72]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019bc:	f7ff f8fc 	bl	8000bb8 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f8f8 	bl	8000bb8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e058      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_OscConfig+0x778>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e2:	e050      	b.n	8001a86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04f      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d144      	bne.n	8001a86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a14:	f7ff f8d0 	bl	8000bb8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f8cc 	bl	8000bb8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e02c      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x7ac>
 8001a3a:	e024      	b.n	8001a86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d01f      	beq.n	8001a82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f8b3 	bl	8000bb8 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f8af 	bl	8000bb8 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e00f      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4905      	ldr	r1, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0x820>)
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_RCC_OscConfig+0x824>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e001      	b.n	8001a86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40021000 	.word	0x40021000
 8001a94:	feeefffc 	.word	0xfeeefffc

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0e7      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b75      	ldr	r3, [pc, #468]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4970      	ldr	r1, [pc, #448]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b6e      	ldr	r3, [pc, #440]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cf      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d908      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4960      	ldr	r1, [pc, #384]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d04c      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d121      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0a6      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b36:	4b54      	ldr	r3, [pc, #336]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e09a      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e08e      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e086      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4943      	ldr	r1, [pc, #268]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b80:	f7ff f81a 	bl	8000bb8 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	e00a      	b.n	8001b9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b88:	f7ff f816 	bl	8000bb8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e06e      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 020c 	and.w	r2, r3, #12
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1eb      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d010      	beq.n	8001bde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d208      	bcs.n	8001bde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	492b      	ldr	r1, [pc, #172]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d210      	bcs.n	8001c0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 0207 	bic.w	r2, r3, #7
 8001bf4:	4923      	ldr	r1, [pc, #140]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e036      	b.n	8001c7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d008      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4918      	ldr	r1, [pc, #96]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d009      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4910      	ldr	r1, [pc, #64]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4c:	f000 f824 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	490b      	ldr	r1, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1f4>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1fc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe ff51 	bl	8000b18 <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08002030 	.word	0x08002030
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x34>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d121      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d11e      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ccc:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e004      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d134      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d003      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xac>
 8001d3c:	e005      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	e005      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_GetSysClockFreq+0x114>)
 8001d46:	617b      	str	r3, [r7, #20]
      break;
 8001d48:	e002      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	fb03 f202 	mul.w	r2, r3, r2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	0e5b      	lsrs	r3, r3, #25
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	3301      	adds	r3, #1
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d90:	69bb      	ldr	r3, [r7, #24]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08002040 	.word	0x08002040
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200

08001db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dc8:	f7ff f9ee 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 8001dcc:	6178      	str	r0, [r7, #20]
 8001dce:	e014      	b.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dda:	6593      	str	r3, [r2, #88]	; 0x58
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001de8:	f7ff f9de 	bl	80011a8 <HAL_PWREx_GetVoltageRange>
 8001dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e00:	d10b      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d919      	bls.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e0c:	d902      	bls.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e0e:	2302      	movs	r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	e013      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e010      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b80      	cmp	r3, #128	; 0x80
 8001e1e:	d902      	bls.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e20:	2303      	movs	r3, #3
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e00a      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d102      	bne.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e004      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b70      	cmp	r3, #112	; 0x70
 8001e36:	d101      	bne.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 0207 	bic.w	r2, r3, #7
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40022000 	.word	0x40022000

08001e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e095      	b.n	8001fae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e92:	d009      	beq.n	8001ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
 8001e9a:	e005      	b.n	8001ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fd2c 	bl	8000920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ee8:	d902      	bls.n	8001ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e002      	b.n	8001ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001efe:	d007      	beq.n	8001f10 <HAL_SPI_Init+0xa0>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f08:	d002      	beq.n	8001f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	ea42 0103 	orr.w	r1, r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	f003 0204 	and.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4d0d      	ldr	r5, [pc, #52]	; (8001ff0 <__libc_init_array+0x38>)
 8001fbc:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <__libc_init_array+0x3c>)
 8001fbe:	1b64      	subs	r4, r4, r5
 8001fc0:	10a4      	asrs	r4, r4, #2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	4d0b      	ldr	r5, [pc, #44]	; (8001ff8 <__libc_init_array+0x40>)
 8001fca:	4c0c      	ldr	r4, [pc, #48]	; (8001ffc <__libc_init_array+0x44>)
 8001fcc:	f000 f820 	bl	8002010 <_init>
 8001fd0:	1b64      	subs	r4, r4, r5
 8001fd2:	10a4      	asrs	r4, r4, #2
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	08002070 	.word	0x08002070
 8001ff4:	08002070 	.word	0x08002070
 8001ff8:	08002070 	.word	0x08002070
 8001ffc:	08002074 	.word	0x08002074

08002000 <memset>:
 8002000:	4402      	add	r2, r0
 8002002:	4603      	mov	r3, r0
 8002004:	4293      	cmp	r3, r2
 8002006:	d100      	bne.n	800200a <memset+0xa>
 8002008:	4770      	bx	lr
 800200a:	f803 1b01 	strb.w	r1, [r3], #1
 800200e:	e7f9      	b.n	8002004 <memset+0x4>

08002010 <_init>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	bf00      	nop
 8002014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002016:	bc08      	pop	{r3}
 8002018:	469e      	mov	lr, r3
 800201a:	4770      	bx	lr

0800201c <_fini>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	bf00      	nop
 8002020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002022:	bc08      	pop	{r3}
 8002024:	469e      	mov	lr, r3
 8002026:	4770      	bx	lr
