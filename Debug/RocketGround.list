
RocketGround.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003280  08003280  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003280  08003280  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003280  08003280  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08003294  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003294  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c701  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b5  00000000  00000000  0002c73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221fa  00000000  00000000  0002fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f053  00000000  00000000  000520da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc934  00000000  00000000  0006112d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012da61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fb4  00000000  00000000  0012dab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800321c 	.word	0x0800321c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800321c 	.word	0x0800321c

080001d4 <lcd_send_cmd>:


#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f023 030f 	bic.w	r3, r3, #15
 80001e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	f043 030c 	orr.w	r3, r3, #12
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000200:	7bbb      	ldrb	r3, [r7, #14]
 8000202:	f043 030c 	orr.w	r3, r3, #12
 8000206:	b2db      	uxtb	r3, r3
 8000208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000214:	f107 0208 	add.w	r2, r7, #8
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2304      	movs	r3, #4
 800021e:	214e      	movs	r1, #78	; 0x4e
 8000220:	4805      	ldr	r0, [pc, #20]	; (8000238 <lcd_send_cmd+0x64>)
 8000222:	f001 f871 	bl	8001308 <HAL_I2C_Master_Transmit>
 8000226:	4603      	mov	r3, r0
 8000228:	737b      	strb	r3, [r7, #13]
	HAL_Delay(1);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fcfc 	bl	8000c28 <HAL_Delay>
}
 8000230:	bf00      	nop
 8000232:	3710      	adds	r7, #16
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000007c 	.word	0x2000007c

0800023c <lcd_send_data>:

void lcd_send_data (char data)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af02      	add	r7, sp, #8
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f023 030f 	bic.w	r3, r3, #15
 800024c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	011b      	lsls	r3, r3, #4
 8000252:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000254:	7bfb      	ldrb	r3, [r7, #15]
 8000256:	f043 030d 	orr.w	r3, r3, #13
 800025a:	b2db      	uxtb	r3, r3
 800025c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800025e:	7bfb      	ldrb	r3, [r7, #15]
 8000260:	f043 0309 	orr.w	r3, r3, #9
 8000264:	b2db      	uxtb	r3, r3
 8000266:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000268:	7bbb      	ldrb	r3, [r7, #14]
 800026a:	f043 030d 	orr.w	r3, r3, #13
 800026e:	b2db      	uxtb	r3, r3
 8000270:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	f043 0309 	orr.w	r3, r3, #9
 8000278:	b2db      	uxtb	r3, r3
 800027a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800027c:	f107 0208 	add.w	r2, r7, #8
 8000280:	2364      	movs	r3, #100	; 0x64
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2304      	movs	r3, #4
 8000286:	214e      	movs	r1, #78	; 0x4e
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <lcd_send_data+0x60>)
 800028a:	f001 f83d 	bl	8001308 <HAL_I2C_Master_Transmit>
 800028e:	4603      	mov	r3, r0
 8000290:	737b      	strb	r3, [r7, #13]
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	2000007c 	.word	0x2000007c

080002a0 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002a4:	2032      	movs	r0, #50	; 0x32
 80002a6:	f000 fcbf 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002aa:	2030      	movs	r0, #48	; 0x30
 80002ac:	f7ff ff92 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002b0:	2005      	movs	r0, #5
 80002b2:	f000 fcb9 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b6:	2030      	movs	r0, #48	; 0x30
 80002b8:	f7ff ff8c 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fcb3 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x30);
 80002c2:	2030      	movs	r0, #48	; 0x30
 80002c4:	f7ff ff86 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(10);
 80002c8:	200a      	movs	r0, #10
 80002ca:	f000 fcad 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002ce:	2020      	movs	r0, #32
 80002d0:	f7ff ff80 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(10);
 80002d4:	200a      	movs	r0, #10
 80002d6:	f000 fca7 	bl	8000c28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f7ff ff7a 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 fca1 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002e6:	2008      	movs	r0, #8
 80002e8:	f7ff ff74 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f000 fc9b 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002f2:	2001      	movs	r0, #1
 80002f4:	f7ff ff6e 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fc95 	bl	8000c28 <HAL_Delay>
	HAL_Delay(1);
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fc92 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff65 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fc8c 	bl	8000c28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000310:	200c      	movs	r0, #12
 8000312:	f7ff ff5f 	bl	80001d4 <lcd_send_cmd>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000322:	e006      	b.n	8000332 <lcd_send_string+0x18>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff85 	bl	800023c <lcd_send_data>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f4      	bne.n	8000324 <lcd_send_string+0xa>
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <Clear_LCD>:


void Clear_LCD(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ff43 	bl	80001d4 <lcd_send_cmd>
	HAL_Delay(1);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 fc6a 	bl	8000c28 <HAL_Delay>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <LCD_Set_Cursor>:
	}
	HAL_Delay(1);
}


void LCD_Set_Cursor(uint8_t num_of_line, uint8_t poz){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	460a      	mov	r2, r1
 8000362:	71fb      	strb	r3, [r7, #7]
 8000364:	4613      	mov	r3, r2
 8000366:	71bb      	strb	r3, [r7, #6]
	if (num_of_line > 4){
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b04      	cmp	r3, #4
 800036c:	d901      	bls.n	8000372 <LCD_Set_Cursor+0x1a>
		num_of_line = 4;
 800036e:	2304      	movs	r3, #4
 8000370:	71fb      	strb	r3, [r7, #7]
	}

	if (poz > 19){
 8000372:	79bb      	ldrb	r3, [r7, #6]
 8000374:	2b13      	cmp	r3, #19
 8000376:	d901      	bls.n	800037c <LCD_Set_Cursor+0x24>
		poz = 19;
 8000378:	2313      	movs	r3, #19
 800037a:	71bb      	strb	r3, [r7, #6]
	}

	switch (num_of_line){
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	3b01      	subs	r3, #1
 8000380:	2b03      	cmp	r3, #3
 8000382:	d837      	bhi.n	80003f4 <LCD_Set_Cursor+0x9c>
 8000384:	a201      	add	r2, pc, #4	; (adr r2, 800038c <LCD_Set_Cursor+0x34>)
 8000386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038a:	bf00      	nop
 800038c:	0800039d 	.word	0x0800039d
 8000390:	080003ad 	.word	0x080003ad
 8000394:	080003c5 	.word	0x080003c5
 8000398:	080003dd 	.word	0x080003dd
	case 1:
		lcd_send_cmd(0x80|(0x00+poz));
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff15 	bl	80001d4 <lcd_send_cmd>
		break;
 80003aa:	e02b      	b.n	8000404 <LCD_Set_Cursor+0xac>
	case 2:
		lcd_send_cmd(0x80|(0x40+poz));
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	3340      	adds	r3, #64	; 0x40
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	b25b      	sxtb	r3, r3
 80003b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003b8:	b25b      	sxtb	r3, r3
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff09 	bl	80001d4 <lcd_send_cmd>
		break;
 80003c2:	e01f      	b.n	8000404 <LCD_Set_Cursor+0xac>
	case 3:
		lcd_send_cmd(0x80|(0x14+poz));
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	3314      	adds	r3, #20
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	b25b      	sxtb	r3, r3
 80003cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003d0:	b25b      	sxtb	r3, r3
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fefd 	bl	80001d4 <lcd_send_cmd>
		break;
 80003da:	e013      	b.n	8000404 <LCD_Set_Cursor+0xac>
	case 4:
		lcd_send_cmd(0x80|(0x54+poz));
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	3354      	adds	r3, #84	; 0x54
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff fef1 	bl	80001d4 <lcd_send_cmd>
		break;
 80003f2:	e007      	b.n	8000404 <LCD_Set_Cursor+0xac>
	default:
		lcd_send_cmd(0x80|(0x00+poz));
 80003f4:	79bb      	ldrb	r3, [r7, #6]
 80003f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff fee9 	bl	80001d4 <lcd_send_cmd>
		break;
 8000402:	bf00      	nop
	}

	HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fc0f 	bl	8000c28 <HAL_Delay>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop

08000414 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b53      	ldr	r3, [pc, #332]	; (8000578 <MX_GPIO_Init+0x164>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	4a52      	ldr	r2, [pc, #328]	; (8000578 <MX_GPIO_Init+0x164>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000436:	4b50      	ldr	r3, [pc, #320]	; (8000578 <MX_GPIO_Init+0x164>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	f003 0304 	and.w	r3, r3, #4
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000442:	4b4d      	ldr	r3, [pc, #308]	; (8000578 <MX_GPIO_Init+0x164>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a4c      	ldr	r2, [pc, #304]	; (8000578 <MX_GPIO_Init+0x164>)
 8000448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b4a      	ldr	r3, [pc, #296]	; (8000578 <MX_GPIO_Init+0x164>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b47      	ldr	r3, [pc, #284]	; (8000578 <MX_GPIO_Init+0x164>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	4a46      	ldr	r2, [pc, #280]	; (8000578 <MX_GPIO_Init+0x164>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000466:	4b44      	ldr	r3, [pc, #272]	; (8000578 <MX_GPIO_Init+0x164>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <MX_GPIO_Init+0x164>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	4a40      	ldr	r2, [pc, #256]	; (8000578 <MX_GPIO_Init+0x164>)
 8000478:	f043 0302 	orr.w	r3, r3, #2
 800047c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047e:	4b3e      	ldr	r3, [pc, #248]	; (8000578 <MX_GPIO_Init+0x164>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	f003 0302 	and.w	r3, r3, #2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2101      	movs	r1, #1
 800048e:	483b      	ldr	r0, [pc, #236]	; (800057c <MX_GPIO_Init+0x168>)
 8000490:	f000 fe7a 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LoRa_RESET_Pin|LoRa_CS_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2131      	movs	r1, #49	; 0x31
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f000 fe74 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_SIGNAL_GPIO_Port, Relay_SIGNAL_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a6:	4836      	ldr	r0, [pc, #216]	; (8000580 <MX_GPIO_Init+0x16c>)
 80004a8:	f000 fe6e 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	482e      	ldr	r0, [pc, #184]	; (800057c <MX_GPIO_Init+0x168>)
 80004c4:	f000 fce6 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	4827      	ldr	r0, [pc, #156]	; (800057c <MX_GPIO_Init+0x168>)
 80004e0:	f000 fcd8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LoRa_RESET_Pin|LoRa_CS_Pin|LD4_Pin;
 80004e4:	2331      	movs	r3, #49	; 0x31
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4619      	mov	r1, r3
 80004fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fe:	f000 fcc9 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000502:	230c      	movs	r3, #12
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000512:	2307      	movs	r3, #7
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fcb8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000524:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800052a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <MX_GPIO_Init+0x168>)
 800053c:	f000 fcaa 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Relay_SIGNAL_Pin;
 8000540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Relay_SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <MX_GPIO_Init+0x16c>)
 800055a:	f000 fc9b 	bl	8000e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	2017      	movs	r0, #23
 8000564:	f000 fc5f 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000568:	2017      	movs	r0, #23
 800056a:	f000 fc78 	bl	8000e5e <HAL_NVIC_EnableIRQ>

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	48000800 	.word	0x48000800
 8000580:	48000400 	.word	0x48000400

08000584 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MX_I2C1_Init+0x7c>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c0:	f000 fe12 	bl	80011e8 <HAL_I2C_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ca:	f000 f991 	bl	80008f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d2:	f001 faf9 	bl	8001bc8 <HAL_I2CEx_ConfigAnalogFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 f988 	bl	80008f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e4:	f001 fb3b 	bl	8001c5e <HAL_I2CEx_ConfigDigitalFilter>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 f97f 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	40005400 	.word	0x40005400
 8000600:	10909cec 	.word	0x10909cec

08000604 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C2_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_I2C2_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_I2C2_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_I2C2_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_I2C2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C2_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_I2C2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C2_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C2_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <MX_I2C2_Init+0x74>)
 8000640:	f000 fdd2 	bl	80011e8 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 f951 	bl	80008f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_I2C2_Init+0x74>)
 8000652:	f001 fab9 	bl	8001bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f948 	bl	80008f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_I2C2_Init+0x74>)
 8000664:	f001 fafb 	bl	8001c5e <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f93f 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000007c 	.word	0x2000007c
 800067c:	40005800 	.word	0x40005800
 8000680:	10909cec 	.word	0x10909cec

08000684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a6      	sub	sp, #152	; 0x98
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2268      	movs	r2, #104	; 0x68
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fdb1 	bl	800320c <memset>
  if(i2cHandle->Instance==I2C1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a43      	ldr	r2, [pc, #268]	; (80007bc <HAL_I2C_MspInit+0x138>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d13d      	bne.n	8000730 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 f97d 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006cc:	f000 f910 	bl	80008f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006dc:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	61bb      	str	r3, [r7, #24]
 80006e6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000702:	2304      	movs	r3, #4
 8000704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 fbbf 	bl	8000e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800072e:	e040      	b.n	80007b2 <HAL_I2C_MspInit+0x12e>
  else if(i2cHandle->Instance==I2C2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a23      	ldr	r2, [pc, #140]	; (80007c4 <HAL_I2C_MspInit+0x140>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d13b      	bne.n	80007b2 <HAL_I2C_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800073e:	2300      	movs	r3, #0
 8000740:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f93a 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8000752:	f000 f8cd 	bl	80008f0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800076e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000788:	2304      	movs	r3, #4
 800078a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <HAL_I2C_MspInit+0x144>)
 8000796:	f000 fb7d 	bl	8000e94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 80007a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_I2C_MspInit+0x13c>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3798      	adds	r7, #152	; 0x98
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40005800 	.word	0x40005800
 80007c8:	48000400 	.word	0x48000400

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 f9ad 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f82f 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f7ff fe1b 	bl	8000414 <MX_GPIO_Init>
  MX_SPI1_Init();
 80007de:	f000 f88d 	bl	80008fc <MX_SPI1_Init>
  MX_I2C1_Init();
 80007e2:	f7ff fecf 	bl	8000584 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007e6:	f7ff ff0d 	bl	8000604 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80007ea:	f7ff fd59 	bl	80002a0 <lcd_init>

  uint8_t data;
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, BMP280_I2C_ADDRESS_0 << 1, 0xD0, 1, &data, 1, 5000);
 80007ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2301      	movs	r3, #1
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	22d0      	movs	r2, #208	; 0xd0
 8000800:	21ec      	movs	r1, #236	; 0xec
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <main+0x64>)
 8000804:	f000 fe74 	bl	80014f0 <HAL_I2C_Mem_Read>
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(500);
 800080c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000810:	f000 fa0a 	bl	8000c28 <HAL_Delay>

  Clear_LCD();
 8000814:	f7ff fd96 	bl	8000344 <Clear_LCD>
  LCD_Set_Cursor(2, 6);
 8000818:	2106      	movs	r1, #6
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff fd9c 	bl	8000358 <LCD_Set_Cursor>
  lcd_send_string("Welcome!");
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <main+0x68>)
 8000822:	f7ff fd7a 	bl	800031a <lcd_send_string>
  HAL_Delay(3000);
 8000826:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800082a:	f000 f9fd 	bl	8000c28 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	e7fe      	b.n	800082e <main+0x62>
 8000830:	20000028 	.word	0x20000028
 8000834:	08003234 	.word	0x08003234

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b096      	sub	sp, #88	; 0x58
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2244      	movs	r2, #68	; 0x44
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fce0 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800085e:	f001 fa59 	bl	8001d14 <HAL_PWREx_ControlVoltageScaling>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000868:	f000 f842 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000886:	230a      	movs	r3, #10
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800088a:	2307      	movs	r3, #7
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa90 	bl	8001dc0 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008a6:	f000 f823 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	230f      	movs	r3, #15
 80008ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2104      	movs	r1, #4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fe90 	bl	80025e8 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ce:	f000 f80f 	bl	80008f0 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3758      	adds	r7, #88	; 0x58
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	80fb      	strh	r3, [r7, #6]

}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_SPI1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_SPI1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_SPI1_Init+0x74>)
 8000908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_SPI1_Init+0x74>)
 8000916:	f44f 7240 	mov.w	r2, #768	; 0x300
 800091a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_SPI1_Init+0x74>)
 800092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_SPI1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_SPI1_Init+0x74>)
 800094a:	2207      	movs	r2, #7
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_SPI1_Init+0x74>)
 8000956:	2208      	movs	r2, #8
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_SPI1_Init+0x74>)
 800095c:	f002 fb8e 	bl	800307c <HAL_SPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f7ff ffc3 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000d0 	.word	0x200000d0
 8000974:	40013000 	.word	0x40013000

08000978 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_SPI_MspInit+0x7c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d128      	bne.n	80009ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a16      	ldr	r2, [pc, #88]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_SPI_MspInit+0x80>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23c2      	movs	r3, #194	; 0xc2
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fa54 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x44>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x44>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_MspInit+0x44>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x44>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x44>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8aa 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a9c:	2080      	movs	r0, #128	; 0x80
 8000a9e:	f000 fb8b 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000aa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000aa6:	f000 fb87 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000aaa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aae:	f000 fb83 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <Reset_Handler>:
 8000adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b14 <LoopForever+0x2>
 8000ae0:	f7ff ffea 	bl	8000ab8 <SystemInit>
 8000ae4:	480c      	ldr	r0, [pc, #48]	; (8000b18 <LoopForever+0x6>)
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <LoopForever+0xa>)
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <LoopForever+0xe>)
 8000aea:	2300      	movs	r3, #0
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:
 8000aee:	58d4      	ldr	r4, [r2, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:
 8000af4:	18c4      	adds	r4, r0, r3
 8000af6:	428c      	cmp	r4, r1
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <LoopForever+0x12>)
 8000afc:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <LoopForever+0x16>)
 8000afe:	2300      	movs	r3, #0
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:
 8000b06:	42a2      	cmp	r2, r4
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>
 8000b0a:	f002 fb5b 	bl	80031c4 <__libc_init_array>
 8000b0e:	f7ff fe5d 	bl	80007cc <main>

08000b12 <LoopForever>:
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
 8000b14:	20028000 	.word	0x20028000
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	08003288 	.word	0x08003288
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000138 	.word	0x20000138

08000b2c <ADC1_IRQHandler>:
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_Init+0x3c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_Init+0x3c>)
 8000b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f962 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f80f 	bl	8000b70 <HAL_InitTick>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	e001      	b.n	8000b62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5e:	f7ff ff4d 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d023      	beq.n	8000bcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_InitTick+0x70>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f96d 	bl	8000e7a <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10f      	bne.n	8000bc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d809      	bhi.n	8000bc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 f937 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_InitTick+0x74>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e007      	b.n	8000bd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e004      	b.n	8000bd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e001      	b.n	8000bd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000004 	.word	0x20000004

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000134 	.word	0x20000134

08000c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000134 	.word	0x20000134

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e154      	b.n	800114e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 8146 	beq.w	8001148 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <HAL_GPIO_Init+0x40>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d017      	beq.n	8000f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d123      	bne.n	8000fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0203 	and.w	r2, r3, #3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80a0 	beq.w	8001148 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	4b58      	ldr	r3, [pc, #352]	; (800116c <HAL_GPIO_Init+0x2d8>)
 800100a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <HAL_GPIO_Init+0x2d8>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6613      	str	r3, [r2, #96]	; 0x60
 8001014:	4b55      	ldr	r3, [pc, #340]	; (800116c <HAL_GPIO_Init+0x2d8>)
 8001016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001020:	4a53      	ldr	r2, [pc, #332]	; (8001170 <HAL_GPIO_Init+0x2dc>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800104a:	d019      	beq.n	8001080 <HAL_GPIO_Init+0x1ec>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x2e0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x1e8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x2e4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1e4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1e0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a46      	ldr	r2, [pc, #280]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1dc>
 800106c:	2304      	movs	r3, #4
 800106e:	e008      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001070:	2307      	movs	r3, #7
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001074:	2303      	movs	r3, #3
 8001076:	e004      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001078:	2302      	movs	r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001080:	2300      	movs	r3, #0
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	f002 0203 	and.w	r2, r2, #3
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4093      	lsls	r3, r2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001092:	4937      	ldr	r1, [pc, #220]	; (8001170 <HAL_GPIO_Init+0x2dc>)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ee:	4a25      	ldr	r2, [pc, #148]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f aea3 	bne.w	8000ea4 <HAL_GPIO_Init+0x10>
  }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800
 800117c:	48000c00 	.word	0x48000c00
 8001180:	48001000 	.word	0x48001000
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fb7f 	bl	80008da <HAL_GPIO_EXTI_Callback>
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e081      	b.n	80012fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fa38 	bl	8000684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e006      	b.n	8001270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800126e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d104      	bne.n	8001282 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69d9      	ldr	r1, [r3, #28]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2220      	movs	r2, #32
 80012ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	817b      	strh	r3, [r7, #10]
 8001318:	4613      	mov	r3, r2
 800131a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b20      	cmp	r3, #32
 8001326:	f040 80da 	bne.w	80014de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_I2C_Master_Transmit+0x30>
 8001334:	2302      	movs	r3, #2
 8001336:	e0d3      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001340:	f7ff fc66 	bl	8000c10 <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2319      	movs	r3, #25
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fa5e 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0be      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2221      	movs	r2, #33	; 0x21
 8001366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2210      	movs	r2, #16
 800136e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	893a      	ldrh	r2, [r7, #8]
 8001382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d90e      	bls.n	80013b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	8979      	ldrh	r1, [r7, #10]
 80013a2:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fbda 	bl	8001b64 <I2C_TransferConfig>
 80013b0:	e06c      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	8979      	ldrh	r1, [r7, #10]
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 fbc9 	bl	8001b64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013d2:	e05b      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6a39      	ldr	r1, [r7, #32]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fa5b 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e07b      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d034      	beq.n	800148c <HAL_I2C_Master_Transmit+0x184>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001426:	2b00      	cmp	r3, #0
 8001428:	d130      	bne.n	800148c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f9ed 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e04d      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d90e      	bls.n	800146c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001458:	b2da      	uxtb	r2, r3
 800145a:	8979      	ldrh	r1, [r7, #10]
 800145c:	2300      	movs	r3, #0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 fb7d 	bl	8001b64 <I2C_TransferConfig>
 800146a:	e00f      	b.n	800148c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001470:	b29a      	uxth	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147a:	b2da      	uxtb	r2, r3
 800147c:	8979      	ldrh	r1, [r7, #10]
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 fb6c 	bl	8001b64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d19e      	bne.n	80013d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fa3a 	bl	8001914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e01a      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2220      	movs	r2, #32
 80014b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_I2C_Master_Transmit+0x1e4>)
 80014be:	400b      	ands	r3, r1
 80014c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2220      	movs	r2, #32
 80014c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80014de:	2302      	movs	r3, #2
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	80002000 	.word	0x80002000
 80014ec:	fe00e800 	.word	0xfe00e800

080014f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b20      	cmp	r3, #32
 8001514:	f040 80fd 	bne.w	8001712 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_I2C_Mem_Read+0x34>
 800151e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0f1      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001536:	2b01      	cmp	r3, #1
 8001538:	d101      	bne.n	800153e <HAL_I2C_Mem_Read+0x4e>
 800153a:	2302      	movs	r3, #2
 800153c:	e0ea      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001546:	f7ff fb63 	bl	8000c10 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2319      	movs	r3, #25
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f95b 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0d5      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2222      	movs	r2, #34	; 0x22
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001590:	88f8      	ldrh	r0, [r7, #6]
 8001592:	893a      	ldrh	r2, [r7, #8]
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 f8bf 	bl	8001724 <I2C_RequestMemoryRead>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0ad      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2bff      	cmp	r3, #255	; 0xff
 80015c0:	d90e      	bls.n	80015e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <HAL_I2C_Mem_Read+0x22c>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fac3 	bl	8001b64 <I2C_TransferConfig>
 80015de:	e00f      	b.n	8001600 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_I2C_Mem_Read+0x22c>)
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fab2 	bl	8001b64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	2200      	movs	r2, #0
 8001608:	2104      	movs	r1, #4
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f902 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e07c      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b29a      	uxth	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d034      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x1d0>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	d130      	bne.n	80016c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	2200      	movs	r2, #0
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f8d3 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e04d      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29b      	uxth	r3, r3
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d90e      	bls.n	80016a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	b2da      	uxtb	r2, r3
 800168e:	8979      	ldrh	r1, [r7, #10]
 8001690:	2300      	movs	r3, #0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fa63 	bl	8001b64 <I2C_TransferConfig>
 800169e:	e00f      	b.n	80016c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fa52 	bl	8001b64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d19a      	bne.n	8001600 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f920 	bl	8001914 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e01a      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2220      	movs	r2, #32
 80016e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_I2C_Mem_Read+0x230>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001712:	2302      	movs	r3, #2
  }
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	80002400 	.word	0x80002400
 8001720:	fe00e800 	.word	0xfe00e800

08001724 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
 8001736:	460b      	mov	r3, r1
 8001738:	813b      	strh	r3, [r7, #8]
 800173a:	4613      	mov	r3, r2
 800173c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <I2C_RequestMemoryRead+0xa4>)
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 fa0a 	bl	8001b64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f89d 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e02c      	b.n	80017be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d105      	bne.n	8001776 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800176a:	893b      	ldrh	r3, [r7, #8]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
 8001774:	e015      	b.n	80017a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001776:	893b      	ldrh	r3, [r7, #8]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f883 	bl	8001894 <I2C_WaitOnTXISFlagUntilTimeout>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e012      	b.n	80017be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001798:	893b      	ldrh	r3, [r7, #8]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2200      	movs	r2, #0
 80017aa:	2140      	movs	r1, #64	; 0x40
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f831 	bl	8001814 <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	80002000 	.word	0x80002000

080017cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d103      	bne.n	80017ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d007      	beq.n	8001808 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	619a      	str	r2, [r3, #24]
  }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001824:	e022      	b.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800182c:	d01e      	beq.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff f9ef 	bl	8000c10 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d113      	bne.n	800186c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2220      	movs	r2, #32
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00f      	b.n	800188c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	429a      	cmp	r2, r3
 8001888:	d0cd      	beq.n	8001826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018a0:	e02c      	b.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f870 	bl	800198c <I2C_IsErrorOccurred>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02a      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018bc:	d01e      	beq.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff f9a7 	bl	8000c10 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d113      	bne.n	80018fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e007      	b.n	800190c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b02      	cmp	r3, #2
 8001908:	d1cb      	bne.n	80018a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001920:	e028      	b.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f830 	bl	800198c <I2C_IsErrorOccurred>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e026      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff f96b 	bl	8000c10 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d113      	bne.n	8001974 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f043 0220 	orr.w	r2, r3, #32
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2220      	movs	r2, #32
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e007      	b.n	8001984 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	2b20      	cmp	r3, #32
 8001980:	d1cf      	bne.n	8001922 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d075      	beq.n	8001aa4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019c0:	e056      	b.n	8001a70 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d052      	beq.n	8001a70 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	f7ff f921 	bl	8000c10 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d302      	bcc.n	80019e0 <I2C_IsErrorOccurred+0x54>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d147      	bne.n	8001a70 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a02:	d12e      	bne.n	8001a62 <I2C_IsErrorOccurred+0xd6>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a0a:	d02a      	beq.n	8001a62 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a0c:	7cfb      	ldrb	r3, [r7, #19]
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	d027      	beq.n	8001a62 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a22:	f7ff f8f5 	bl	8000c10 <HAL_GetTick>
 8001a26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a28:	e01b      	b.n	8001a62 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a2a:	f7ff f8f1 	bl	8000c10 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b19      	cmp	r3, #25
 8001a36:	d914      	bls.n	8001a62 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d1dc      	bne.n	8001a2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d003      	beq.n	8001a86 <I2C_IsErrorOccurred+0xfa>
 8001a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d09d      	beq.n	80019c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01c      	beq.n	8001b54 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fe56 	bl	80017cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <I2C_IsErrorOccurred+0x1d4>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fe00e800 	.word	0xfe00e800

08001b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	817b      	strh	r3, [r7, #10]
 8001b72:	4613      	mov	r3, r2
 8001b74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b76:	897b      	ldrh	r3, [r7, #10]
 8001b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b7c:	7a7b      	ldrb	r3, [r7, #9]
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	0d5b      	lsrs	r3, r3, #21
 8001b9e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <I2C_TransferConfig+0x60>)
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	ea02 0103 	and.w	r1, r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	03ff63ff 	.word	0x03ff63ff

08001bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d138      	bne.n	8001c50 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e032      	b.n	8001c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d139      	bne.n	8001ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e033      	b.n	8001cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2224      	movs	r2, #36	; 0x24
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cb0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000

08001d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d22:	d130      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d038      	beq.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2232      	movs	r2, #50	; 0x32
 8001d48:	fb02 f303 	mul.w	r3, r2, r3
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d58:	e002      	b.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	d102      	bne.n	8001d74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f2      	bne.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d110      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e00f      	b.n	8001da6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	d007      	beq.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d9c:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	431bde83 	.word	0x431bde83

08001dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f000 bc02 	b.w	80025d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd4:	4b96      	ldr	r3, [pc, #600]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dde:	4b94      	ldr	r3, [pc, #592]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80e4 	beq.w	8001fbe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4c>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	f040 808b 	bne.w	8001f1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f040 8087 	bne.w	8001f1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_OscConfig+0x64>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e3d9      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <HAL_RCC_OscConfig+0x7e>
 8001e34:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e3c:	e005      	b.n	8001e4a <HAL_RCC_OscConfig+0x8a>
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d223      	bcs.n	8001e96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd54 	bl	8002900 <RCC_SetFlashLatencyFromMSIRange>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e3ba      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e68:	f043 0308 	orr.w	r3, r3, #8
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	496d      	ldr	r1, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e80:	4b6b      	ldr	r3, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	4968      	ldr	r1, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
 8001e94:	e025      	b.n	8001ee2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e96:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4960      	ldr	r1, [pc, #384]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	495b      	ldr	r1, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fd14 	bl	8002900 <RCC_SetFlashLatencyFromMSIRange>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e37a      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee2:	f000 fc81 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	4950      	ldr	r1, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	5ccb      	ldrb	r3, [r1, r3]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	fa22 f303 	lsr.w	r3, r2, r3
 8001efe:	4a4e      	ldr	r2, [pc, #312]	; (8002038 <HAL_RCC_OscConfig+0x278>)
 8001f00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f02:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_RCC_OscConfig+0x27c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fe32 	bl	8000b70 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d052      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	e35e      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d032      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f22:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a42      	ldr	r2, [pc, #264]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe fe6f 	bl	8000c10 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f36:	f7fe fe6b 	bl	8000c10 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e347      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4930      	ldr	r1, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f72:	4b2f      	ldr	r3, [pc, #188]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	492b      	ldr	r1, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
 8001f86:	e01a      	b.n	8001fbe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f94:	f7fe fe3c 	bl	8000c10 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f9c:	f7fe fe38 	bl	8000c10 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e314      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1dc>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d073      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x21c>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d063      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d15f      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e2f1      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x24c>
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e025      	b.n	8002058 <HAL_RCC_OscConfig+0x298>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d114      	bne.n	8002040 <HAL_RCC_OscConfig+0x280>
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a02      	ldr	r2, [pc, #8]	; (8002030 <HAL_RCC_OscConfig+0x270>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e013      	b.n	8002058 <HAL_RCC_OscConfig+0x298>
 8002030:	40021000 	.word	0x40021000
 8002034:	08003240 	.word	0x08003240
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004
 8002040:	4ba0      	ldr	r3, [pc, #640]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a9f      	ldr	r2, [pc, #636]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b9d      	ldr	r3, [pc, #628]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a9c      	ldr	r2, [pc, #624]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fdd6 	bl	8000c10 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fdd2 	bl	8000c10 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e2ae      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	4b92      	ldr	r3, [pc, #584]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x2a8>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fdc2 	bl	8000c10 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7fe fdbe 	bl	8000c10 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e29a      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x2d0>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d060      	beq.n	8002180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_OscConfig+0x310>
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d119      	bne.n	80020fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d116      	bne.n	80020fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	4b7c      	ldr	r3, [pc, #496]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_OscConfig+0x328>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e277      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	4973      	ldr	r1, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fc:	e040      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d023      	beq.n	800214e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002106:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a6e      	ldr	r2, [pc, #440]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7fe fd7d 	bl	8000c10 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211a:	f7fe fd79 	bl	8000c10 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e255      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212c:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	495f      	ldr	r1, [pc, #380]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e018      	b.n	8002180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe fd59 	bl	8000c10 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe fd55 	bl	8000c10 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e231      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002174:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d03c      	beq.n	8002206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219a:	4a4a      	ldr	r2, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fd34 	bl	8000c10 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe fd30 	bl	8000c10 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e20c      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ef      	beq.n	80021ac <HAL_RCC_OscConfig+0x3ec>
 80021cc:	e01b      	b.n	8002206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	4a3b      	ldr	r2, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe fd17 	bl	8000c10 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe fd13 	bl	8000c10 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1ef      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ef      	bne.n	80021e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80a6 	beq.w	8002360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x508>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d118      	bne.n	800227e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x508>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x508>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002258:	f7fe fcda 	bl	8000c10 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe fcd6 	bl	8000c10 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1b2      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCC_OscConfig+0x508>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_RCC_OscConfig+0x4d8>
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002296:	e029      	b.n	80022ec <HAL_RCC_OscConfig+0x52c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d115      	bne.n	80022cc <HAL_RCC_OscConfig+0x50c>
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_RCC_OscConfig+0x504>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c0:	e014      	b.n	80022ec <HAL_RCC_OscConfig+0x52c>
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	4b9a      	ldr	r3, [pc, #616]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a99      	ldr	r2, [pc, #612]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022dc:	4b96      	ldr	r3, [pc, #600]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	4a95      	ldr	r2, [pc, #596]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d016      	beq.n	8002322 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fc8c 	bl	8000c10 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fc88 	bl	8000c10 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e162      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002312:	4b89      	ldr	r3, [pc, #548]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ed      	beq.n	80022fc <HAL_RCC_OscConfig+0x53c>
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe fc75 	bl	8000c10 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fc71 	bl	8000c10 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e14b      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002340:	4b7d      	ldr	r3, [pc, #500]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ed      	bne.n	800232a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234e:	7ffb      	ldrb	r3, [r7, #31]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b78      	ldr	r3, [pc, #480]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a77      	ldr	r2, [pc, #476]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01c      	beq.n	80023ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002374:	4b70      	ldr	r3, [pc, #448]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800237a:	4a6f      	ldr	r2, [pc, #444]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fc44 	bl	8000c10 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238c:	f7fe fc40 	bl	8000c10 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e11c      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80023a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ef      	beq.n	800238c <HAL_RCC_OscConfig+0x5cc>
 80023ac:	e01b      	b.n	80023e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ae:	4b62      	ldr	r3, [pc, #392]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80023b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b4:	4a60      	ldr	r2, [pc, #384]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7fe fc27 	bl	8000c10 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c6:	f7fe fc23 	bl	8000c10 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0ff      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80023da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ef      	bne.n	80023c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80f3 	beq.w	80025d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	f040 80c9 	bne.w	800258c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023fa:	4b4f      	ldr	r3, [pc, #316]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	429a      	cmp	r2, r3
 800240c:	d12c      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	3b01      	subs	r3, #1
 800241a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d123      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d11b      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d113      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d109      	bne.n	8002468 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d06b      	beq.n	8002540 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d062      	beq.n	8002534 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800246e:	4b32      	ldr	r3, [pc, #200]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0ac      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800247e:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800248a:	f7fe fbc1 	bl	8000c10 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fbbd 	bl	8000c10 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e099      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_RCC_OscConfig+0x77c>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0112      	lsls	r2, r2, #4
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0552      	lsls	r2, r2, #21
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024de:	0852      	lsrs	r2, r2, #1
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0652      	lsls	r2, r2, #25
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024ea:	06d2      	lsls	r2, r2, #27
 80024ec:	430a      	orrs	r2, r1
 80024ee:	4912      	ldr	r1, [pc, #72]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800250c:	f7fe fb80 	bl	8000c10 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fb7c 	bl	8000c10 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e058      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <HAL_RCC_OscConfig+0x778>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002532:	e050      	b.n	80025d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04f      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
 8002538:	40021000 	.word	0x40021000
 800253c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d144      	bne.n	80025d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 800255e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002562:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002564:	f7fe fb54 	bl	8000c10 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fb50 	bl	8000c10 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e02c      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x7ac>
 800258a:	e024      	b.n	80025d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d01f      	beq.n	80025d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 8002598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fb37 	bl	8000c10 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fb33 	bl	8000c10 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4905      	ldr	r1, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x820>)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x824>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
 80025d0:	e001      	b.n	80025d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	feeefffc 	.word	0xfeeefffc

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0e7      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b72      	ldr	r3, [pc, #456]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4970      	ldr	r1, [pc, #448]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0cf      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002644:	429a      	cmp	r2, r3
 8002646:	d908      	bls.n	800265a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4960      	ldr	r1, [pc, #384]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04c      	beq.n	8002700 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d121      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0a6      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e09a      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e08e      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e086      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4943      	ldr	r1, [pc, #268]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe fa9e 	bl	8000c10 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fa9a 	bl	8000c10 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e06e      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002718:	429a      	cmp	r2, r3
 800271a:	d208      	bcs.n	800272e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	492b      	ldr	r1, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d210      	bcs.n	800275e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 0207 	bic.w	r2, r3, #7
 8002744:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x1ec>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e036      	b.n	80027cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4918      	ldr	r1, [pc, #96]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4910      	ldr	r1, [pc, #64]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279c:	f000 f824 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	490b      	ldr	r1, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1f4>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1fc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe f9d5 	bl	8000b70 <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	08003240 	.word	0x08003240
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d121      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d11e      	bne.n	800285a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800282a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e005      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d102      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	e004      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d101      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_RCC_GetSysClockFreq+0x114>)
 800286e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d134      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0xa6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b03      	cmp	r3, #3
 800288a:	d003      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0xac>
 800288c:	e005      	b.n	800289a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002890:	617b      	str	r3, [r7, #20]
      break;
 8002892:	e005      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002896:	617b      	str	r3, [r7, #20]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	617b      	str	r3, [r7, #20]
      break;
 800289e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	3301      	adds	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	fb03 f202 	mul.w	r2, r3, r2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	0e5b      	lsrs	r3, r3, #25
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	3301      	adds	r3, #1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028e0:	69bb      	ldr	r3, [r7, #24]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08003250 	.word	0x08003250
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	007a1200 	.word	0x007a1200

08002900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002918:	f7ff f9ee 	bl	8001cf8 <HAL_PWREx_GetVoltageRange>
 800291c:	6178      	str	r0, [r7, #20]
 800291e:	e014      	b.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002938:	f7ff f9de 	bl	8001cf8 <HAL_PWREx_GetVoltageRange>
 800293c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d10b      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d919      	bls.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2ba0      	cmp	r3, #160	; 0xa0
 800295c:	d902      	bls.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800295e:	2302      	movs	r3, #2
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e013      	b.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002964:	2301      	movs	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e010      	b.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b80      	cmp	r3, #128	; 0x80
 800296e:	d902      	bls.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002970:	2303      	movs	r3, #3
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e00a      	b.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d102      	bne.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800297c:	2302      	movs	r3, #2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	e004      	b.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b70      	cmp	r3, #112	; 0x70
 8002986:	d101      	bne.n	800298c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 0207 	bic.w	r2, r3, #7
 8002994:	4909      	ldr	r1, [pc, #36]	; (80029bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40022000 	.word	0x40022000

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d031      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029e4:	d01a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ea:	d814      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029f6:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a02:	e00c      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fa44 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a14:	e003      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	74fb      	strb	r3, [r7, #19]
      break;
 8002a1a:	e000      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a24:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	494e      	ldr	r1, [pc, #312]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a3a:	e001      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 809e 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a52:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00d      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a68:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6593      	str	r3, [r2, #88]	; 0x58
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a80:	2301      	movs	r3, #1
 8002a82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a39      	ldr	r2, [pc, #228]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a90:	f7fe f8be 	bl	8000c10 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a98:	f7fe f8ba 	bl	8000c10 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d902      	bls.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ef      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d15a      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01e      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d019      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	4a1f      	ldr	r2, [pc, #124]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe f87a 	bl	8000c10 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f876 	bl	8000c10 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d902      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	74fb      	strb	r3, [r7, #19]
            break;
 8002b36:	e006      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ec      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b5a:	4904      	ldr	r1, [pc, #16]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b62:	e009      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
 8002b68:	e006      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b78:	7c7b      	ldrb	r3, [r7, #17]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4b9e      	ldr	r3, [pc, #632]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a9d      	ldr	r2, [pc, #628]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b96:	4b98      	ldr	r3, [pc, #608]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 0203 	bic.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4994      	ldr	r1, [pc, #592]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f023 020c 	bic.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	498c      	ldr	r1, [pc, #560]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bda:	4b87      	ldr	r3, [pc, #540]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	4983      	ldr	r1, [pc, #524]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	497b      	ldr	r1, [pc, #492]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4972      	ldr	r1, [pc, #456]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c40:	4b6d      	ldr	r3, [pc, #436]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	496a      	ldr	r1, [pc, #424]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c62:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	4961      	ldr	r1, [pc, #388]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c84:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c92:	4959      	ldr	r1, [pc, #356]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca6:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	4950      	ldr	r1, [pc, #320]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	4948      	ldr	r1, [pc, #288]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cf0:	f023 0203 	bic.w	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	493f      	ldr	r1, [pc, #252]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	4937      	ldr	r1, [pc, #220]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	e011      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8a4 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d94:	60d3      	str	r3, [r2, #12]
 8002d96:	e011      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f875 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de6:	d109      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df2:	60d3      	str	r3, [r2, #12]
 8002df4:	e014      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f843 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	4916      	ldr	r1, [pc, #88]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f820 	bl	8002e98 <RCCEx_PLLSAI1_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	4904      	ldr	r1, [pc, #16]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d018      	beq.n	8002ee4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eb2:	4b71      	ldr	r3, [pc, #452]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0203 	and.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d10d      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d047      	beq.n	8002f6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e044      	b.n	8002f6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d018      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x86>
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d825      	bhi.n	8002f3c <RCCEx_PLLSAI1_Config+0xa4>
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d002      	beq.n	8002efa <RCCEx_PLLSAI1_Config+0x62>
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d009      	beq.n	8002f0c <RCCEx_PLLSAI1_Config+0x74>
 8002ef8:	e020      	b.n	8002f3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0a:	e01a      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f0c:	4b5a      	ldr	r3, [pc, #360]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e013      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f2a:	4b53      	ldr	r3, [pc, #332]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f3a:	e006      	b.n	8002f4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	e004      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f52:	4b49      	ldr	r3, [pc, #292]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	430b      	orrs	r3, r1
 8002f68:	4943      	ldr	r1, [pc, #268]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d17c      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3f      	ldr	r2, [pc, #252]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f80:	f7fd fe46 	bl	8000c10 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f86:	e009      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f88:	f7fd fe42 	bl	8000c10 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d902      	bls.n	8002f9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	73fb      	strb	r3, [r7, #15]
        break;
 8002f9a:	e005      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ef      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d15f      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d110      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6892      	ldr	r2, [r2, #8]
 8002fc4:	0211      	lsls	r1, r2, #8
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	06d2      	lsls	r2, r2, #27
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	492a      	ldr	r1, [pc, #168]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	610b      	str	r3, [r1, #16]
 8002fd4:	e027      	b.n	8003026 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d112      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fe4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6892      	ldr	r2, [r2, #8]
 8002fec:	0211      	lsls	r1, r2, #8
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6912      	ldr	r2, [r2, #16]
 8002ff2:	0852      	lsrs	r2, r2, #1
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	0552      	lsls	r2, r2, #21
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	491f      	ldr	r1, [pc, #124]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	610b      	str	r3, [r1, #16]
 8003000:	e011      	b.n	8003026 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003002:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800300a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	0211      	lsls	r1, r2, #8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6952      	ldr	r2, [r2, #20]
 8003018:	0852      	lsrs	r2, r2, #1
 800301a:	3a01      	subs	r2, #1
 800301c:	0652      	lsls	r2, r2, #25
 800301e:	430a      	orrs	r2, r1
 8003020:	4915      	ldr	r1, [pc, #84]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a13      	ldr	r2, [pc, #76]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 800302c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003030:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fd fded 	bl	8000c10 <HAL_GetTick>
 8003036:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003038:	e009      	b.n	800304e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303a:	f7fd fde9 	bl	8000c10 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d902      	bls.n	800304e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	73fb      	strb	r3, [r7, #15]
          break;
 800304c:	e005      	b.n	800305a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ef      	beq.n	800303a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e095      	b.n	80031ba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d009      	beq.n	80030b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
 80030a6:	e005      	b.n	80030b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fc52 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f4:	d902      	bls.n	80030fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e002      	b.n	8003102 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003100:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800310a:	d007      	beq.n	800311c <HAL_SPI_Init+0xa0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003114:	d002      	beq.n	800311c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	ea42 0103 	orr.w	r1, r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	f003 0204 	and.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003198:	ea42 0103 	orr.w	r1, r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	4d0d      	ldr	r5, [pc, #52]	; (80031fc <__libc_init_array+0x38>)
 80031c8:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031ca:	1b64      	subs	r4, r4, r5
 80031cc:	10a4      	asrs	r4, r4, #2
 80031ce:	2600      	movs	r6, #0
 80031d0:	42a6      	cmp	r6, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	4d0b      	ldr	r5, [pc, #44]	; (8003204 <__libc_init_array+0x40>)
 80031d6:	4c0c      	ldr	r4, [pc, #48]	; (8003208 <__libc_init_array+0x44>)
 80031d8:	f000 f820 	bl	800321c <_init>
 80031dc:	1b64      	subs	r4, r4, r5
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	2600      	movs	r6, #0
 80031e2:	42a6      	cmp	r6, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ec:	4798      	blx	r3
 80031ee:	3601      	adds	r6, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f6:	4798      	blx	r3
 80031f8:	3601      	adds	r6, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003280 	.word	0x08003280
 8003200:	08003280 	.word	0x08003280
 8003204:	08003280 	.word	0x08003280
 8003208:	08003284 	.word	0x08003284

0800320c <memset>:
 800320c:	4402      	add	r2, r0
 800320e:	4603      	mov	r3, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <_init>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr

08003228 <_fini>:
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322a:	bf00      	nop
 800322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322e:	bc08      	pop	{r3}
 8003230:	469e      	mov	lr, r3
 8003232:	4770      	bx	lr
